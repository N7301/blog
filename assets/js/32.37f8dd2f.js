(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{367:function(t,_,v){"use strict";v.r(_);var a=v(4),s=Object(a.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("blockquote",[_("p",[t._v("参考：")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://time.geekbang.org/column/intro/100056701?tab=catalog",target:"_blank",rel:"noopener noreferrer"}},[t._v("25 缓存异常（上）：如何解决缓存和数据库的数据不一致问题？| 极客时间"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://time.geekbang.org/column/intro/100056701?tab=catalog",target:"_blank",rel:"noopener noreferrer"}},[t._v("26 缓存异常（下）：如何解决缓存雪崩、击穿、穿透难题？| 极客时间"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s/OWuP66WxpciBAgm2mptUxw",target:"_blank",rel:"noopener noreferrer"}},[t._v("缓存数据一致性探究 | 阿里开发者"),_("OutboundLink")],1)])])]),t._v(" "),_("p",[t._v("掌握缓存需要解决四个关键问题：")]),t._v(" "),_("ul",[_("li",[t._v("Redis 缓存具体是怎么工作的？(工作原理)")]),t._v(" "),_("li",[t._v("Redis 缓存如果满了，该怎么办？(替换策略)")]),t._v(" "),_("li",[t._v("为什么会有缓存一致性、缓存穿透、缓存雪崩、缓存击穿等异常，该如何应对？(异常处理机制)")]),t._v(" "),_("li",[t._v("Redis 的内存毕竟有限，如果用快速的固态硬盘来保存数据，可以增加缓存的数据量，那 Redis 缓存可以使用快速固态硬盘吗？(扩展机制)")])]),t._v(" "),_("p",[t._v("下面介绍第三个问题。")]),t._v(" "),_("h2",{attrs:{id:"_3-缓存异常-上-如何解决缓存和数据库的数据不一致问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-缓存异常-上-如何解决缓存和数据库的数据不一致问题"}},[t._v("#")]),t._v(" 3. 缓存异常（上）：如何解决缓存和数据库的数据不一致问题？")]),t._v(" "),_("p",[t._v("Redis 用作缓存经常有一些异常问题，概括来说有 4 个方面：缓存中的数据和数据库中的不一致；缓存雪崩；缓存击穿和缓存穿透。这一节先看一下第一个问题。")]),t._v(" "),_("h3",{attrs:{id:"_3-1-缓存和数据库的数据不一致是如何发生的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-缓存和数据库的数据不一致是如何发生的"}},[t._v("#")]),t._v(" 3.1 缓存和数据库的数据不一致是如何发生的？")]),t._v(" "),_("p",[t._v("这里的数据的一致性其实包含两种情况：")]),t._v(" "),_("ul",[_("li",[t._v("缓存中有数据，且与数据库中的相同")]),t._v(" "),_("li",[t._v("缓存中本身没有数据，且数据库中是最新的")])]),t._v(" "),_("p",[t._v("不符合这两种情况的，就属于缓存和数据库的数据不一致问题了。当缓存的读写模式不同时，我们的应对方法也不一样。")]),t._v(" "),_("p",[t._v("对于"),_("u",[t._v("读写缓存")]),t._v("来说，数据的 CRUD 要在缓存中进行，同时对原数据库进行写回：")]),t._v(" "),_("ul",[_("li",[t._v("若想要保证缓存与数据库的数据一致，就要使用事务机制来使用同步直写策略来一块更新缓存和数据库，保证这俩的更新有原子性。")]),t._v(" "),_("li",[t._v("若对一致性要求没有那么高，就可以使用异步写回策略。")])]),t._v(" "),_("p",[t._v("对于"),_("u",[t._v("只读缓存")]),t._v("来说，如果有数据新增，会直接写入数据库；而有数据删改时，就需要把只读缓存中的数据标记为无效。这样一来，应用后续再访问这些增删改的数据时，因为缓存中没有相应的数据，就会发生缓存缺失。此时，应用再从数据库中把数据读入缓存，这样后续再访问数据时，就能够直接从缓存中读取了。这个过程如下图所示：")]),t._v(" "),_("center",[_("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/20230411223753.png",alt:"20230411223753"}})]),t._v(" "),_("p",[t._v("从图中可以看到，Tomcat上运行的应用，无论是新增（Insert操作）、修改（Update操作）、还是删除（Delete操作）数据X，都会直接在数据库中增改删。当然，如果应用执行的是修改或删除操作，还会删除缓存的数据X。")]),t._v(" "),_("p",[t._v("那这个过程会不会出现数据不一致的情况呢？考虑到新增数据和删改数据的情况不一样，所以我们分开来看：")]),t._v(" "),_("h4",{attrs:{id:"_1-新增数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-新增数据"}},[t._v("#")]),t._v(" 1）新增数据")]),t._v(" "),_("p",[t._v("如果是新增数据，数据会直接写到数据库中，不用对缓存做任何操作，此时，缓存中本身就没有新增数据，而数据库中是最新值，因此是一致的。")]),t._v(" "),_("h4",{attrs:{id:"_2-删改数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-删改数据"}},[t._v("#")]),t._v(" 2）删改数据")]),t._v(" "),_("p",[t._v("此时就要选择是先更新原数据库的数据还是先删除缓存中的数据：")]),t._v(" "),_("ul",[_("li",[t._v("如果先删缓存值：可能导致数据库更新失败。导致请求再次访问缓存时，发现缓存缺失，再读 DB 时，从其中读到旧值。")]),t._v(" "),_("li",[t._v("如果先更新数据库的值：可能出现缓存删除失败。导致后续请求因再次缓存命中导致读取缓存旧值。")])]),t._v(" "),_("p",[t._v("可以看到，无论这两个操作的执行顺序谁先谁后，只要有一个操作失败了，就会导致客户端读取到旧值。如何解决这个问题呢？")]),t._v(" "),_("h3",{attrs:{id:"_3-2-如何解决数据不一致问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-如何解决数据不一致问题"}},[t._v("#")]),t._v(" 3.2 如何解决数据不一致问题？")]),t._v(" "),_("p",[t._v("数据不一致出现的原因主要分为两种情况：")]),t._v(" "),_("ul",[_("li",[t._v("对 DB/缓存 的操作，第二个失败了\n解决方法：\n"),_("ul",[_("li",[t._v("重试机制")]),t._v(" "),_("li",[t._v("订阅 MySQL binlog，再操作缓存")])])]),t._v(" "),_("li",[t._v("复杂的并发场景下，对数据库和缓存的操作都是成功的")])]),t._v(" "),_("h4",{attrs:{id:"_3-2-1-重试机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-重试机制"}},[t._v("#")]),t._v(" 3.2.1 重试机制")]),t._v(" "),_("p",[t._v("首先一种方法是：重试机制。")]),t._v(" "),_("p",[t._v("具体来说，可以把要删除的缓存值或者是要更新的数据库值暂存到"),_("font",{attrs:{color:"red"}},[t._v("消息队列")]),t._v("中（例如使用Kafka消息队列）。当应用没有能够成功地删除缓存值或者是更新数据库值时，可以从消息队列中重新读取这些值，然后再次进行删除或更新。")],1),t._v(" "),_("p",[t._v("如果能够成功地删除或更新，我们就要把这些值从消息队列中去除，以免重复操作，此时，我们也可以保证数据库和缓存的数据一致了。否则的话，我们还需要再次进行重试。如果重试超过的一定次数，还是没有成功，我们就需要向业务层发送报错信息了。")]),t._v(" "),_("p",[t._v("图显示了先更新数据库，再删除缓存值时，如果缓存删除失败，再次重试后删除成功的情况：")]),t._v(" "),_("center",[_("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/20230411224331.png",alt:"20230411224331"}})]),t._v(" "),_("h4",{attrs:{id:"_3-2-2-订阅-mysql-binlog-再操作缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-订阅-mysql-binlog-再操作缓存"}},[t._v("#")]),t._v(" 3.2.2 订阅 MySQL binlog，再操作缓存")]),t._v(" "),_("p",[t._v("「先更新数据库，再删缓存」的策略的第一步是更新数据库，那么更新数据库成功，就会产生一条变更日志，记录在 binlog 里。于是我们就可以通过订阅 binlog 日志，拿到具体要操作的数据，然后再执行缓存删除，阿里巴巴开源的 Canal 中间件就是基于这个实现的。")]),t._v(" "),_("p",[t._v("Canal 模拟 MySQL 主从复制的交互协议，把自己伪装成一个 MySQL 的从节点，向 MySQL 主节点发送 dump 请求，MySQL 收到请求后，就会开始推送 Binlog 给 Canal，Canal 解析 Binlog 字节流之后，转换为便于读取的结构化数据，供下游程序订阅使用。")]),t._v(" "),_("p",[t._v("下图是 Canal 的工作原理：")]),t._v(" "),_("center",[_("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/20230605153607.png",alt:"$uploadName"}})]),t._v(" "),_("p",[t._v("所以，如果要想保证「先更新数据库，再删缓存」策略第二个操作能执行成功，我们可以使用「消息队列来重试缓存的删除」，或者「订阅 MySQL binlog 再操作缓存」，这两种方法有一个共同的特点，都是采用异步操作缓存。")]),t._v(" "),_("h4",{attrs:{id:"_3-2-3-延迟双删"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-延迟双删"}},[t._v("#")]),t._v(" 3.2.3 延迟双删")]),t._v(" "),_("p",[t._v("刚刚说的是在更新数据库和删除缓存值的过程中，其中一个操作失败的情况，实际上，即使这两个操作第一次执行时都没有失败，当有大量并发请求时，应用还是有可能读到不一致的数据。")]),t._v(" "),_("p",[t._v("同样，我们按照不同的删除和更新顺序，分成两种情况来看。在这两种情况下，我们的解决方法也有所不同。")]),t._v(" "),_("p",[_("strong",[t._v("情况一：先删除缓存，再更新数据库")]),t._v("：")]),t._v(" "),_("p",[t._v("假设线程A删除缓存值后，还没有来得及更新数据库（比如说有网络延迟），线程B就开始读取数据了，那么这个时候，线程B会发现缓存缺失，就只能去数据库读取。这会带来两个问题：")]),t._v(" "),_("ol",[_("li",[t._v("线程B读取到了旧值；")]),t._v(" "),_("li",[t._v("线程B是在缓存缺失的情况下读取的数据库，所以，它还会把旧值写入缓存，这可能会导致其他线程从缓存中读到旧值。")])]),t._v(" "),_("p",[t._v("等到线程B从数据库读取完数据、更新了缓存后，线程A才开始更新数据库，此时，缓存中的数据是旧值，而数据库中的是最新值，两者就不一致了。这种情况用表格展示如下：")]),t._v(" "),_("center",[_("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/20230411224915.png",alt:"20230411224915"}})]),t._v(" "),_("p",[t._v("这该怎么办？一种解决方案是："),_("strong",[t._v("在线程A更新完数据库值以后，我们可以让它先sleep一小段时间，再进行一次缓存删除操作")]),t._v("。")]),t._v(" "),_("p",[t._v("之所以要加上sleep的这段时间，就是为了让线程B能够先从数据库读取数据，再把缺失的数据写入缓存，然后，线程A再进行删除。所以，线程A sleep的时间，就需要大于线程B读取数据再写入缓存的时间。这个时间怎么确定呢？建议你在业务程序运行的时候，统计下线程读数据和写缓存的操作时间，以此为基础来进行估算。")]),t._v(" "),_("p",[t._v("这样一来，其它线程读取数据时，会发现缓存缺失，所以会从数据库中读取最新值。因为这个方案会在第一次删除缓存值后，延迟一段时间再次进行删除，所以我们也把它叫做"),_("mark",[t._v("延迟双删")]),t._v("。下面是延迟双删的伪代码：")]),t._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[t._v("redis"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("delKey")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("X")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndb"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("X")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("N")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nredis"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("delKey")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("X")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br")])]),_("p",[_("strong",[t._v("情况二：先更新数据库值，再删除缓存值")]),t._v("：")]),t._v(" "),_("p",[t._v("如果线程A删除了数据库中的值，但还没来得及删除缓存值，线程B就开始读取数据了，那么此时，线程B查询缓存时，发现缓存命中，就会直接从缓存中读取旧值。不过，在这种情况下，如果其他线程并发读缓存的请求不多，那么，就不会有很多请求读取到旧值。而且，线程A一般也会很快删除缓存值，这样一来，其他线程再次读取时，就会发生缓存缺失，进而从数据库中读取最新值。所以，这种情况对业务的影响较小。")]),t._v(" "),_("p",[t._v("这种情况用表格展示为：")]),t._v(" "),_("center",[_("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/20230411225023.png",alt:"20230411225023"}})]),t._v(" "),_("hr"),t._v(" "),_("p",[t._v("到这里我们可以知道，缓存和数据库的数据不一致一般是由两个原因导致的，本节并提供了相应的解决方案：")]),t._v(" "),_("ul",[_("li",[t._v("删除缓存值或更新数据库失败而导致数据不一致，你可以使用重试机制确保删除或更新操作成功。")]),t._v(" "),_("li",[t._v("在删除缓存值、更新数据库的这两步操作中，有其他线程的并发读操作，导致其他线程读取到旧值，应对方案是延迟双删。")])]),t._v(" "),_("h3",{attrs:{id:"_3-3-小结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-小结"}},[t._v("#")]),t._v(" 3.3 小结")]),t._v(" "),_("p",[t._v("这一大节讲了缓存不一致的问题，可以分成读写缓存和只读缓存两种情况分析。")]),t._v(" "),_("ul",[_("li",[t._v("对于读写缓存，同步写回策略就可以保证缓存和数据库中的数据一致。")]),t._v(" "),_("li",[t._v("对于只读缓存，可以总结为下面这张表：")])]),t._v(" "),_("center",[_("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/20230411225118.png",alt:"20230411225118"}})]),t._v(" "),_("p",[_("font",{attrs:{color:"blue"}},[t._v("大多数业务中，我们是把 Redis 当做只读缓存来使用，并建议优先使用先更新数据库再删除缓存的方法("),_("mark",[t._v("cache aside")]),t._v(")")]),t._v("，原因主要有两个：")],1),t._v(" "),_("ol",[_("li",[t._v("先删除缓存值再更新数据库，有可能导致请求因缓存缺失而访问数据库，给数据库带来压力；")]),t._v(" "),_("li",[t._v("如果业务应用中读取数据库和写缓存的时间不好估算，那么，延迟双删中的等待时间就不好设置。")])]),t._v(" "),_("p",[t._v("不过，当使用先更新数据库再删除缓存时，也有个地方需要注意，如果业务层要求必须读取一致的数据，那么，我们就需要在更新数据库时，先在Redis缓存客户端暂存并发读请求，等数据库更新完、缓存值删除后，再读取数据，从而保证数据一致性。")]),t._v(" "),_("hr"),t._v(" "),_("p",[t._v("catch aside 可以被称之为缓存使用的最佳实践，但与此同时，它引入了缓存的命中率降低的问题，（每次都删除缓存自然导致更不容易命中了），因此它更适用于对缓存命中率要求并不是特别高的场景。如果要求较高的缓存命中率，依然需要采用"),_("u",[t._v("更新数据库后同时更新缓存的方案")]),t._v("。")]),t._v(" "),_("p",[t._v("但是"),_("u",[t._v("更新数据库后同时更新缓存的方案")]),t._v("会在并发场景下出现数据不一致，解决方案有两种：")]),t._v(" "),_("ul",[_("li",[t._v("引入分布式锁\n在更新缓存之前尝试获取锁，如果已经被占用就先阻塞住线程，等待其他线程释放锁后再尝试更新。但这会影响并发操作的性能。")]),t._v(" "),_("li",[t._v("设置较短缓存时间\n设置较短的缓存过期时间能够使得数据不一致问题存在的时间也比较长，对业务的影响相对较小。但是与此同时，其实这也使得缓存命中率降低，又回到了前面的问题里...")])]),t._v(" "),_("h2",{attrs:{id:"_4-缓存异常-下-如何解决缓存雪崩、击穿、穿透难题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-缓存异常-下-如何解决缓存雪崩、击穿、穿透难题"}},[t._v("#")]),t._v(" 4. 缓存异常（下）：如何解决缓存雪崩、击穿、穿透难题？")]),t._v(" "),_("p",[t._v("除了缓存不一致，还有三种可能的缓存异常：缓存雪崩、缓存击穿和缓存穿透。这三个问题一旦发生，会导致大量的请求积压到数据库层，从而导致数据库宕机或者故障。")]),t._v(" "),_("h3",{attrs:{id:"_4-1-缓存雪崩"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-缓存雪崩"}},[t._v("#")]),t._v(" 4.1 缓存雪崩")]),t._v(" "),_("p",[_("mark",[t._v("缓存雪崩")]),t._v("：指大量的应用请求无法在 Redis 缓存中进行处理，紧接着应用将大量请求发送到数据库层，导致数据库层的压力激增。")]),t._v(" "),_("p",[t._v("缓存雪崩一般是由两个原因导致的，应对方案也有所不同，我们一个个来看。")]),t._v(" "),_("h4",{attrs:{id:"_4-1-1-原因一-大量数据同时过期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-原因一-大量数据同时过期"}},[t._v("#")]),t._v(" 4.1.1 原因一：大量数据同时过期")]),t._v(" "),_("p",[_("font",{attrs:{color:"red"}},[t._v("缓存雪崩的第一种原因：缓存中有大量数据同时过期，导致大量请求无法得到处理")]),t._v("。")],1),t._v(" "),_("p",[t._v("具体来说，当数据保存在缓存中，并且设置了过期时间时，如果在某一个时刻，大量数据同时过期，此时，应用再访问这些数据的话，就会发生缓存缺失。紧接着，应用就会把请求发送给数据库，从数据库中读取数据。如果应用的并发请求量很大，那么数据库的压力也就很大，这会进一步影响到数据库的其他正常业务请求处理。我们来看一个简单的例子，如下图所示：")]),t._v(" "),_("center",[_("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/20230412094737.png",alt:"$uploadName"}})]),t._v(" "),_("p",[t._v("针对大量数据同时失效带来的缓存雪崩问题，有两种解决方案：")]),t._v(" "),_("ol",[_("li",[_("strong",[t._v("微调过期时间")]),t._v("：业务避免给大量的数据设置相同的过期时间。如果业务层的确要求有些数据同时失效，你可以在用 EXPIRE 命令给每个数据设置过期时间时，给这些数据的过期时间增加一个较小的随机数。这样一来，不同数据的过期时间差别不会太大，既避免了大量数据同时过期，同时也保证了这些数据基本在相近的时间失效，仍然能满足业务需求。")]),t._v(" "),_("li",[_("strong",[t._v("服务降级")]),t._v("：指发生缓存雪崩时，针对不同的数据采取不同的处理方式：\n"),_("ul",[_("li",[t._v("当业务应用访问的是非核心数据（例如电商商品属性）时，暂时停止从缓存中查询这些数据，而是直接返回预定义信息、空值或是错误信息；")]),t._v(" "),_("li",[t._v("当业务应用访问的是核心数据（例如电商商品库存）时，仍然允许查询缓存，如果缓存缺失，也可以继续通过数据库读取。")])])])]),t._v(" "),_("h4",{attrs:{id:"_4-1-2-原因二-redis-缓存实例发生宕机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-原因二-redis-缓存实例发生宕机"}},[t._v("#")]),t._v(" 4.1.2 原因二：Redis 缓存实例发生宕机")]),t._v(" "),_("p",[_("font",{attrs:{color:"red"}},[t._v("缓存雪崩的第二种原因：Redis 缓存实例发生故障宕机了，无法处理请求，这就会导致大量请求一下子积压到数据库层，从而发生缓存雪崩")]),t._v("。")],1),t._v(" "),_("p",[t._v("一般来说，一个 Redis 实例可以支持数万级别的请求处理吞吐量，而单个数据库可能只能支持数千级别的请求处理吞吐量，它们两个的处理能力可能相差了近十倍。由于缓存雪崩，Redis 缓存失效，所以，数据库就可能要承受近十倍的请求压力，从而因为压力过大而崩溃。")]),t._v(" "),_("p",[t._v("这种情况下由于 Redis 实例发生了宕机，我们需要通过其他方法来应对缓存雪崩了。我给你提供两个建议：")]),t._v(" "),_("p",[_("strong",[t._v("第一个建议：在业务系统中实现服务熔断或请求限流机制")]),t._v("。")]),t._v(" "),_("p",[t._v("所谓的"),_("mark",[t._v("服务熔断")]),t._v("，是指在发生缓存雪崩时，为了防止引发连锁的数据库雪崩，甚至是整个系统的崩溃，我们暂停业务应用对缓存系统的接口访问，而是直接返回，等到Redis缓存实例重新恢复服务后，再允许应用请求发送到缓存系统。这样避免了大量请求因缓存缺失而积压到数据库系统。")]),t._v(" "),_("p",[t._v("在业务系统运行时，我们可以监测 Redis 所在机器和数据库所在机器的负载指标，例如每秒请求数、CPU利用率、内存利用率等。如果我们发现 Redis 实例宕机了，而数据库所在机器的负载压力突然增加，此时就发生缓存雪崩了。大量请求被发送到数据库进行处理。我们可以启动服务熔断机制，暂停业务应用对缓存服务的访问，从而降低对数据库的访问压力，如下图所示：")]),t._v(" "),_("center",[_("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/20230412095718.png",alt:"$uploadName"}})]),t._v(" "),_("p",[t._v("服务熔断虽然可以保证数据库的正常运行，但是暂停了整个缓存系统的访问，对业务应用的影响范围大。为了尽可能减少这种影响，我们也可以进行"),_("mark",[t._v("请求限流")]),t._v("：指我们在业务系统的请求入口前端控制每秒进入系统的请求数，避免过多的请求被发送到数据库。")]),t._v(" "),_("p",[t._v("举个例子。假设业务系统正常运行时，请求入口前端允许每秒进入系统的请求是1万个，其中，9000个请求都能在缓存系统中进行处理，只有1000个请求会被应用发送到数据库进行处理。一旦发生了缓存雪崩，数据库的每秒请求数突然增加到每秒1万个，此时，我们就可以启动请求限流机制，在请求入口前端只允许每秒进入系统的请求数为1000个，再多的请求就会在入口前端被直接拒绝服务。所以，使用了请求限流，就可以避免大量并发请求压力传递到数据库层。")]),t._v(" "),_("center",[_("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/20230412095908.png",alt:"$uploadName"}})]),t._v(" "),_("p",[t._v("使用服务熔断或是请求限流机制，来应对Redis实例宕机导致的缓存雪崩问题，是属于“事后诸葛亮”，也就是已经发生缓存雪崩了，我们使用这两个机制，来降低雪崩对数据库和整个业务系统的影响。")]),t._v(" "),_("p",[_("strong",[t._v("第二个建议：事前预防，构建 Redis 集群")]),t._v("。")]),t._v(" "),_("p",[t._v("通过主从节点的方式构建 Redis 缓存高可靠集群。如果 Redis 缓存的主节点故障宕机了，从节点还可以切换成为主节点，继续提供缓存服务，避免了由于缓存实例宕机而导致的缓存雪崩问题。")]),t._v(" "),_("p",[t._v("缓存雪崩是发生在"),_("u",[t._v("大量数据同时失效的场景下")]),t._v("，而接下来我要向你介绍的缓存击穿，是"),_("u",[t._v("发生在某个热点数据失效的场景下")]),t._v("。和缓存雪崩相比，缓存击穿失效的数据数量要小很多，应对方法也不一样，我们来看下。")]),t._v(" "),_("h3",{attrs:{id:"_4-2-缓存击穿"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-缓存击穿"}},[t._v("#")]),t._v(" 4.2 缓存击穿")]),t._v(" "),_("p",[_("mark",[t._v("缓存击穿")]),t._v("是指，针对某个访问非常频繁的热点数据的请求，无法在缓存中进行处理，紧接着，访问该数据的大量请求，一下子都发送到了后端数据库，导致了数据库压力激增，会影响数据库处理其他请求。"),_("strong",[t._v("缓存击穿的情况，经常发生在热点数据过期失效时")]),t._v("，如下图所示：")]),t._v(" "),_("center",[_("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/20230412100516.png",alt:"$uploadName"}})]),t._v(" "),_("p",[t._v("为了避免缓存击穿给数据库带来的激增压力，我们的解决方法也比较直接："),_("strong",[t._v("对于访问特别频繁的热点数据，我们就不设置过期时间了")]),t._v("。这样一来，对热点数据的访问请求，都可以在缓存中进行处理，而 Redis 数万级别的高吞吐量可以很好地应对大量的并发请求访问。")]),t._v(" "),_("p",[t._v("以上，缓存雪崩和缓存击穿问题，都是在 DB 中保存了应用要访问的数据的情况。下面要看的缓存穿透是数据也不在 DB 中的情况。")]),t._v(" "),_("h3",{attrs:{id:"_4-3-缓存穿透"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-缓存穿透"}},[t._v("#")]),t._v(" 4.3 缓存穿透")]),t._v(" "),_("p",[_("mark",[t._v("缓存穿透")]),t._v("指要访问的数据既不在 Redis 缓存中，也不在数据库中，导致请求在访问缓存时，发生缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据。此时，应用也无法从数据库中读取数据再写入缓存，来服务后续请求，这样一来，缓存也就成了“摆设”，如果应用持续有大量请求访问数据，就会同时给缓存和数据库带来巨大压力，如下图所示：")]),t._v(" "),_("center",[_("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/20230412100808.png",alt:"$uploadName"}})]),t._v(" "),_("p",[t._v("那么，缓存穿透会发生在什么时候呢？一般来说，有两种情况：")]),t._v(" "),_("ul",[_("li",[t._v("业务层误操作：缓存中的数据和数据库中的数据被误删除了，所以缓存和数据库中都没有数据；")]),t._v(" "),_("li",[t._v("恶意攻击：专门访问数据库中没有的数据。")])]),t._v(" "),_("p",[t._v("为了避免缓存穿透的影响，我来给你提供三种应对方案。")]),t._v(" "),_("h4",{attrs:{id:"_1-方案-1-缓存空值或缺省值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-方案-1-缓存空值或缺省值"}},[t._v("#")]),t._v(" 1）方案 1：缓存空值或缺省值")]),t._v(" "),_("p",[t._v("一旦发生缓存穿透，我们就可以针对查询的数据，在Redis中缓存一个空值或是和业务层协商确定的缺省值（例如，库存的缺省值可以设为0）。紧接着，应用发送的后续请求再进行查询时，就可以直接从Redis中读取空值或缺省值，返回给业务应用了，避免了把大量请求发送给数据库处理，保持了数据库的正常运行。")]),t._v(" "),_("h4",{attrs:{id:"_2-方案-2-使用布隆过滤器快速判断数据是否存在-避免从数据库中查询数据是否存在-减轻数据库压力"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-方案-2-使用布隆过滤器快速判断数据是否存在-避免从数据库中查询数据是否存在-减轻数据库压力"}},[t._v("#")]),t._v(" 2）方案 2：使用布隆过滤器快速判断数据是否存在，避免从数据库中查询数据是否存在，减轻数据库压力")]),t._v(" "),_("p",[_("mark",[t._v("布隆过滤器")]),t._v("由一个初值都为0的bit数组和N个哈希函数组成，可以用来快速判断某个数据是否存在。当我们想标记某个数据存在时（例如，数据已被写入数据库），布隆过滤器会通过三个操作完成标记：")]),t._v(" "),_("ul",[_("li",[t._v("首先，使用N个哈希函数，分别计算这个数据的哈希值，得到N个哈希值。")]),t._v(" "),_("li",[t._v("然后，我们把这N个哈希值对bit数组的长度取模，得到每个哈希值在数组中的对应位置。")]),t._v(" "),_("li",[t._v("最后，我们把对应位置的bit位设置为1，这就完成了在布隆过滤器中标记数据的操作。")])]),t._v(" "),_("p",[t._v("如果数据不存在（例如，数据库里没有写入数据），我们也就没有用布隆过滤器标记过数据，那么，bit数组对应bit位的值仍然为0。")]),t._v(" "),_("p",[t._v("当需要查询某个数据时，我们就执行刚刚说的计算过程，先得到这个数据在bit数组中对应的N个位置。紧接着，我们查看bit数组中这N个位置上的bit值。只要这N个bit值有一个不为1，这就表明布隆过滤器没有对该数据做过标记，所以，查询的数据一定没有在数据库中保存。这个过程如下图：")]),t._v(" "),_("center",[_("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/20230412101612.png",alt:"$uploadName"}})]),t._v(" "),_("p",[t._v("图中布隆过滤器是一个包含10个bit位的数组，使用了3个哈希函数，当在布隆过滤器中标记数据X时，X会被计算3次哈希值，并对10取模，取模结果分别是1、3、7。所以，bit数组的第1、3、7位被设置为1。当应用想要查询X时，只要查看数组的第1、3、7位是否为1，只要有一个为0，那么，X就肯定不在数据库中。")]),t._v(" "),_("p",[t._v("正是基于布隆过滤器的快速检测特性，我们可以在把数据写入数据库时，使用布隆过滤器做个标记。"),_("strong",[t._v("当缓存缺失后，应用查询数据库时，可以通过查询布隆过滤器快速判断数据是否存在")]),t._v("。如果不存在，就不用再去数据库中查询了。这样一来，即使发生缓存穿透了，大量请求只会查询Redis和布隆过滤器，而不会积压到数据库，也就不会影响数据库的正常运行。"),_("strong",[t._v("布隆过滤器可以使用Redis实现，本身就能承担较大的并发访问压力")]),t._v("。")]),t._v(" "),_("h4",{attrs:{id:"_3-方案-3-提前对请求进行合法性检测"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-方案-3-提前对请求进行合法性检测"}},[t._v("#")]),t._v(" 3）方案 3：提前对请求进行合法性检测")]),t._v(" "),_("p",[t._v("这种方案是在请求入口的前端进行请求检测。缓存穿透的一个原因是有大量的恶意请求访问不存在的数据，所以，一个有效的应对方案是在请求入口前端，"),_("strong",[t._v("对业务系统接收到的请求进行合法性检测")]),t._v("，把恶意的请求（例如请求参数不合理、请求参数是非法值、请求字段不存在）直接过滤掉，不让它们访问后端缓存和数据库。这样一来，也就不会出现缓存穿透问题了。")]),t._v(" "),_("p",[t._v("跟缓存雪崩、缓存击穿这两类问题相比，缓存穿透的影响更大一些，希望你能重点关注一下：")]),t._v(" "),_("ul",[_("li",[t._v("从预防的角度来说，我们需要避免误删除数据库和缓存中的数据；")]),t._v(" "),_("li",[t._v("从应对角度来说，我们可以在业务系统中使用缓存空值或缺省值、使用布隆过滤器，以及进行恶意请求检测等方法。")])]),t._v(" "),_("h3",{attrs:{id:"_4-4-小结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-小结"}},[t._v("#")]),t._v(" 4.4 小结")]),t._v(" "),_("p",[t._v("本节所讲的三个问题如下图所示：")]),t._v(" "),_("center",[_("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/20230412101725.png",alt:"$uploadName"}})]),t._v(" "),_("p",[t._v("最后强调一下，服务熔断、服务降级、请求限流这些方法都是属于“有损”方案，在保证数据库和整体系统稳定的同时，会对业务应用带来负面影响。例如使用服务降级时，有部分数据的请求就只能得到错误返回信息，无法正常处理。如果使用了服务熔断，那么，整个缓存系统的服务都被暂停了，影响的业务范围更大。而使用了请求限流机制后，整个业务系统的吞吐率会降低，能并发处理的用户请求会减少，会影响到用户体验。")]),t._v(" "),_("p",[t._v("所以"),_("font",{attrs:{color:"blue"}},[t._v("建议尽量使用预防式方案")]),t._v("：")],1),t._v(" "),_("ul",[_("li",[t._v("针对缓存雪崩，合理地设置数据过期时间，以及搭建高可靠缓存集群；")]),t._v(" "),_("li",[t._v("针对缓存击穿，在缓存访问非常频繁的热点数据时，不要设置过期时间；")]),t._v(" "),_("li",[t._v("针对缓存穿透，提前在入口前端实现恶意请求检测，或者规范数据库的数据删除操作，避免误删除。")])])],1)}),[],!1,null,null,null);_.default=s.exports}}]);