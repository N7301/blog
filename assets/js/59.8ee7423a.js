(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{394:function(t,_,e){"use strict";e.r(_);var s=e(4),v=Object(s.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"git-基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-基础"}},[t._v("#")]),t._v(" Git 基础")]),t._v(" "),_("p",[t._v("Git 保存的不是文件的变化或者差异，而是一系列不同时刻的文件快照。")]),t._v(" "),_("h3",{attrs:{id:"_1-三种状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-三种状态"}},[t._v("#")]),t._v(" 1. 三种状态")]),t._v(" "),_("p",[t._v("Git 有"),_("strong",[t._v("三种状态")]),t._v("，你的文件可能处于其中之一：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("已提交（committed）")]),t._v(" "),_("p",[t._v("表示数据已经安全的保存在本地数据库中。")])]),t._v(" "),_("li",[_("p",[t._v("已修改（modified）")]),t._v(" "),_("p",[t._v("表示修改了文件，但还没保存到数据库中。")])]),t._v(" "),_("li",[_("p",[t._v("已暂存（staged）")]),t._v(" "),_("p",[t._v("表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。")])])]),t._v(" "),_("p",[t._v("Git 项目的"),_("strong",[t._v("三个工作区域")]),t._v("的概念：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Git 仓库")]),t._v(" "),_("p",[t._v("是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。")])]),t._v(" "),_("li",[_("p",[t._v("工作目录")]),t._v(" "),_("p",[t._v("是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。")])]),t._v(" "),_("li",[_("p",[t._v("暂存区域")]),t._v(" "),_("p",[t._v("是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作“索引”，不过一般说法还是叫暂存区域。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/image-20220329084425641.png",alt:"image-20220329084425641"}})])])]),t._v(" "),_("p",[t._v("基本的 "),_("strong",[t._v("Git 工作流程")]),t._v("如下：")]),t._v(" "),_("ol",[_("li",[t._v("在工作目录中修改文件。")]),t._v(" "),_("li",[t._v("暂存文件，将文件的快照放入暂存区域。")]),t._v(" "),_("li",[t._v("提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。")])]),t._v(" "),_("p",[t._v("如果 Git 目录中保存着的特定版本文件，就属于"),_("u",[t._v("已提交状态")]),t._v("。 如果作了修改并已放入暂存区域，就属于"),_("u",[t._v("已暂存状态")]),t._v("。 如果自上次取出后，作了修改但还没有放到暂存区域，就是"),_("u",[t._v("已修改状态")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"_2-获取git仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-获取git仓库"}},[t._v("#")]),t._v(" 2. 获取Git仓库")]),t._v(" "),_("p",[t._v("有两种取得 Git 项目仓库的方法。 第一种是在现有项目或目录下导入所有文件到 Git 中； 第二种是从一个服务器克隆一个现有的 Git 仓库。")]),t._v(" "),_("h4",{attrs:{id:"_2-1-在现有目录中初始化仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-在现有目录中初始化仓库"}},[t._v("#")]),t._v(" 2.1 在现有目录中初始化仓库")]),t._v(" "),_("p",[t._v("如果你打算使用 Git 来对现有的项目进行管理，你只需要进入该项目目录并输入：")]),t._v(" "),_("div",{staticClass:"language-console line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("$ git init\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[t._v("该命令将创建一个名为 "),_("code",[t._v(".git")]),t._v(" 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。")]),t._v(" "),_("p",[t._v("如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。 你可通过 "),_("code",[t._v("git add")]),t._v(" 命令来实现对指定文件的跟踪，然后执行 "),_("code",[t._v("git commit")]),t._v(" 提交：")]),t._v(" "),_("div",{staticClass:"language-console line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("$ git add *.c\n$ git add LICENSE\n$ git commit -m 'initial project version'\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br")])]),_("h4",{attrs:{id:"_2-2-克隆现有的仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-克隆现有的仓库"}},[t._v("#")]),t._v(" 2.2 克隆现有的仓库")]),t._v(" "),_("p",[t._v("如果你想获得一份已经存在了的 Git 仓库的拷贝，比如说，你想为某个开源项目贡献自己的一份力，这时就要用到 "),_("code",[t._v("git clone")]),t._v(" 命令。")]),t._v(" "),_("p",[t._v("克隆仓库的命令格式是 "),_("code",[t._v("git clone [url]")]),t._v(" 。 比如，要克隆 Git 的可链接库 libgit2，可以用下面的命令：")]),t._v(" "),_("div",{staticClass:"language-console line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("$ git clone https://github.com/libgit2/libgit2\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[t._v("如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令：")]),t._v(" "),_("div",{staticClass:"language-console line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("$ git clone https://github.com/libgit2/libgit2 mylibgit\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[t._v("这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 "),_("code",[t._v("mylibgit")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"_3-记录每次更新到仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-记录每次更新到仓库"}},[t._v("#")]),t._v(" 3.记录每次更新到仓库")]),t._v(" "),_("p",[t._v("现在我们手上有了一个真实项目的 Git 仓库，并从这个仓库中取出了所有文件的工作拷贝。 接下来，对这些文件做些修改，在完成了一个阶段的目标之后，提交本次更新到仓库。")]),t._v(" "),_("p",[t._v("请记住，你工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪。已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://blog-1310567564.cos.ap-beijing.myqcloud.com/img/image-20220329090951771.png",alt:"image-20220329090951771"}})]),t._v(" "),_("p",[t._v("新建一个文件，此时是 Untracked 状态；若使用"),_("code",[t._v("git add")]),t._v("命令将文件暂存，则是 Staged 状态；此时"),_("code",[t._v("commit")]),t._v("则会变为 Unmodified 状态。")]),t._v(" "),_("h4",{attrs:{id:"_3-1-检查当前文件状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-检查当前文件状态"}},[t._v("#")]),t._v(" 3.1 检查当前文件状态")]),t._v(" "),_("p",[t._v("要查看哪些文件处于什么状态，可以用 "),_("code",[t._v("git status")]),t._v(" 命令。")]),t._v(" "),_("p",[t._v("运行 "),_("code",[t._v("git status")]),t._v(" 命令，出现在 "),_("code",[t._v("Changes not staged for commit")]),t._v(" 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。 要暂存这次更新，需要运行 "),_("code",[t._v("git add")]),t._v(" 命令。 这是个"),_("strong",[t._v("多功能命令")]),t._v("：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 "),_("u",[t._v("将这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。")])]),t._v(" "),_("p",[t._v("只要在 "),_("code",[t._v("Changes to be committed")]),t._v(" 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。")]),t._v(" "),_("h4",{attrs:{id:"_3-2-跟踪新文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-跟踪新文件"}},[t._v("#")]),t._v(" 3.2 跟踪新文件")]),t._v(" "),_("p",[t._v("使用命令 "),_("code",[t._v("git add")]),t._v(" 开始跟踪一个文件。运行 "),_("code",[t._v("git status")]),t._v(" 命令，会看到相应的文件已被跟踪，并处于暂存状态。")]),t._v(" "),_("h4",{attrs:{id:"_3-3-暂存已修改文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-暂存已修改文件"}},[t._v("#")]),t._v(" 3.3 暂存已修改文件")]),t._v(" "),_("p",[t._v("如3.1中所述进行暂存，若"),_("code",[t._v("git add")]),t._v("之后又进行对相关文件（假设是"),_("code",[t._v("CONTRIBUTING.md")]),t._v("）的修改，要进行提交，此时文件会同时出现在暂存区和非暂存区。这怎么可能呢？ 好吧，实际上 Git 只不过暂存了你运行 "),_("code",[t._v("git add")]),t._v(" 命令时的版本， 如果你现在提交，"),_("code",[t._v("CONTRIBUTING.md")]),t._v(" 的版本是你最后一次运行 "),_("code",[t._v("git add")]),t._v(" 命令时的那个版本，而不是你运行 "),_("code",[t._v("git commit")]),t._v(" 时，在工作目录中的当前版本。 所以，"),_("u",[t._v("运行了 "),_("code",[t._v("git add")]),t._v(" 之后又作了修订的文件，需要重新运行 "),_("code",[t._v("git add")]),t._v(" 把最新版本重新暂存起来")]),t._v("。")]),t._v(" "),_("h4",{attrs:{id:"_3-4-忽略文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-忽略文件"}},[t._v("#")]),t._v(" 3.4 忽略文件")]),t._v(" "),_("p",[t._v("一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 "),_("code",[t._v(".gitignore")]),t._v(" 的文件，列出要忽略的文件模式。")]),t._v(" "),_("p",[t._v("详见《Pro Git 中文版（第二版）》")]),t._v(" "),_("h4",{attrs:{id:"_3-5-查看已暂存和未暂存的修改"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-查看已暂存和未暂存的修改"}},[t._v("#")]),t._v(" 3.5 查看已暂存和未暂存的修改")]),t._v(" "),_("p",[t._v("如果 "),_("code",[t._v("git status")]),t._v(" 命令的输出对于你来说过于模糊，你想知道具体修改了什么地方，可以用 "),_("code",[t._v("git diff")]),t._v(" 命令。通常会用它来回答这两个问题：当前做的哪些更新还没有暂存？ 有哪些更新已经暂存起来准备好了下次提交？")]),t._v(" "),_("p",[t._v("要查看"),_("strong",[t._v("尚未暂存的文件更新了哪些部分")]),t._v("，不加参数直接输入 "),_("code",[t._v("git diff")]),t._v("，此命令比较的是"),_("u",[t._v("工作目录中当前文件和暂存区域")]),t._v("快照之间的差异， 也就是修改之后还没有暂存起来的变化内容。")]),t._v(" "),_("p",[t._v("若要查看"),_("strong",[t._v("已暂存的将要添加到下次提交里的内容")]),t._v("，可以用 "),_("code",[t._v("git diff --cached")]),t._v(" 命令。（Git 1.6.1 及更高版本还允许使用 "),_("code",[t._v("git diff --staged")]),t._v("，效果是相同的，但更好记些。）")]),t._v(" "),_("p",[t._v("请注意，git diff 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。 所以有时候你一下子暂存了所有更新过的文件后，运行 "),_("code",[t._v("git diff")]),t._v(" 后却什么也没有，就是这个原因。")]),t._v(" "),_("h4",{attrs:{id:"_3-6-提交更新"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-提交更新"}},[t._v("#")]),t._v(" 3.6 提交更新")]),t._v(" "),_("ol",[_("li",[t._v("每次准备提交前，先用 "),_("code",[t._v("git status")]),t._v(" 看下，是不是都已暂存起来了， 然后再运行提交命令 "),_("code",[t._v("git commit")]),t._v("：")])]),t._v(" "),_("div",{staticClass:"language-console line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("$ git commit\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[t._v("这种方式会启动文本编辑器以便输入本次提交的说明。 (默认会启用 shell 的环境变量 "),_("code",[t._v("$EDITOR")]),t._v(" 所指定的软件，一般都是 vim 或 emacs。")]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("可以在 "),_("code",[t._v("commit")]),t._v(" 命令后添加 "),_("code",[t._v("-m")]),t._v(" 选项，将提交信息与命令放在同一行，")])]),t._v(" "),_("p",[t._v("提交后它会告诉你，当前是在哪个分支（"),_("code",[t._v("master")]),t._v("）提交的，本次提交的完整 SHA-1 校验和是什么（"),_("code",[t._v("463dc4f")]),t._v("），以及在本次提交中，有多少文件修订过，多少行添加和删改过。")]),t._v(" "),_("p",[t._v("请记住，提交时记录的是放在暂存区域的快照。 任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。 "),_("u",[t._v("每一次运行"),_("strong",[t._v("提交")]),t._v("操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。")])]),t._v(" "),_("h3",{attrs:{id:"_4-查看提交历史"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-查看提交历史"}},[t._v("#")]),t._v(" 4. 查看提交历史")]),t._v(" "),_("p",[t._v("完成这个任务最简单而又有效的工具是 "),_("code",[t._v("git log")]),t._v(" 命令。")]),t._v(" "),_("p",[t._v("默认不用任何参数的话，"),_("code",[t._v("git log")]),t._v(" 会按提交时间列出所有的更新，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。")]),t._v(" "),_("p",[_("code",[t._v("git log")]),t._v(" 有许多选项可以帮助你搜寻你所要找的提交， 接下来我们介绍些最常用的。")]),t._v(" "),_("ul",[_("li",[t._v("一个常用的选项是 "),_("code",[t._v("-p")]),t._v("，用来显示每次提交的内容差异。 你也可以加上 "),_("code",[t._v("-2")]),t._v(" 来仅显示最近两次提交。")]),t._v(" "),_("li",[_("code",[t._v("--stat")]),t._v(" 选项在每次提交的下面列出额所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。")]),t._v(" "),_("li",[_("code",[t._v("--pretty")]),t._v("。 这个选项可以指定使用不同于默认格式的方式展示提交历史。 这个选项有一些内建的子选项供你使用。 比如用 "),_("code",[t._v("oneline")]),t._v(" 将每个提交放在一行显示，查看的提交数很大时非常有用。 另外还有 "),_("code",[t._v("short")]),t._v("，"),_("code",[t._v("full")]),t._v(" 和 "),_("code",[t._v("fuller")]),t._v(" 可以用，展示的信息或多或少有些不同。")])]),t._v(" "),_("h3",{attrs:{id:"_5-撤消操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-撤消操作"}},[t._v("#")]),t._v(" 5. 撤消操作")]),t._v(" "),_("p",[t._v("在任何一个阶段，你都有可能想要撤消某些操作。 这里，我们将会学习几个撤消你所做修改的基本工具。 注意，有些撤消操作是不可逆的。 这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个地方之一。")]),t._v(" "),_("p",[t._v("有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 "),_("code",[t._v("--amend")]),t._v(" 选项的提交命令尝试重新提交：")]),t._v(" "),_("div",{staticClass:"language-console line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("$ git commit --amend\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[t._v("这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息。")]),t._v(" "),_("p",[t._v("文本编辑器启动后，可以看到之前的提交信息。 编辑后保存会覆盖原来的提交信息。")]),t._v(" "),_("h4",{attrs:{id:"_5-1-取消暂存的文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-取消暂存的文件"}},[t._v("#")]),t._v(" 5.1 取消暂存的文件")]),t._v(" "),_("p",[t._v("接下来的两个小节演示如何操作暂存区域与工作目录中已修改的文件。 这些命令在修改文件状态的同时，也会提示如何撤消操作。 例如，你已经修改了两个文件并且想要将它们作为两次独立的修改提交，但是却意外地输入了 "),_("code",[t._v("git add *")]),t._v(" 暂存了它们两个。 如何只取消暂存两个中的一个呢？ "),_("code",[t._v("git status")]),t._v(" 命令提示了你：")]),t._v(" "),_("div",{staticClass:"language-console line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('$ git add *\n$ git status\nOn branch master\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n    renamed:    README.md -> README\n    modified:   CONTRIBUTING.md\n')])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br"),_("span",{staticClass:"line-number"},[t._v("8")]),_("br")])]),_("p",[t._v("在 “Changes to be committed” 文字正下方，提示使用 "),_("code",[t._v("git reset HEAD <file>...")]),t._v(" 来取消暂存。 所以，我们可以这样来取消暂存 "),_("code",[t._v("CONTRIBUTING.md")]),t._v(" 文件：")]),t._v(" "),_("div",{staticClass:"language-console line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('$ git reset HEAD CONTRIBUTING.md\nUnstaged changes after reset:\nM\tCONTRIBUTING.md\n$ git status\nOn branch master\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n    renamed:    README.md -> README\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md\n')])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br"),_("span",{staticClass:"line-number"},[t._v("8")]),_("br"),_("span",{staticClass:"line-number"},[t._v("9")]),_("br"),_("span",{staticClass:"line-number"},[t._v("10")]),_("br"),_("span",{staticClass:"line-number"},[t._v("11")]),_("br"),_("span",{staticClass:"line-number"},[t._v("12")]),_("br"),_("span",{staticClass:"line-number"},[t._v("13")]),_("br"),_("span",{staticClass:"line-number"},[t._v("14")]),_("br"),_("span",{staticClass:"line-number"},[t._v("15")]),_("br")])]),_("p",[t._v("这个命令有点儿奇怪，但是起作用了。 "),_("code",[t._v("CONTRIBUTING.md")]),t._v(" 文件已经是修改未暂存的状态了。")]),t._v(" "),_("h4",{attrs:{id:"_5-2-撤消对文件的修改"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-撤消对文件的修改"}},[t._v("#")]),t._v(" 5.2 撤消对文件的修改")]),t._v(" "),_("p",[t._v("如果你并不想保留对 "),_("code",[t._v("CONTRIBUTING.md")]),t._v(" 文件的修改怎么办？ 你该如何方便地撤消修改 - 将它还原成上次提交时的样子（或者刚克隆完的样子，或者刚把它放入工作目录时的样子）？ 幸运的是，"),_("code",[t._v("git status")]),t._v(" 也告诉了你应该如何做。")]),t._v(" "),_("p",[t._v("记住，在 Git 中任何 "),_("em",[t._v("已提交的")]),t._v(" 东西几乎总是可以恢复的。 甚至那些被删除的分支中的提交或使用 "),_("code",[t._v("--amend")]),t._v(" 选项覆盖的提交也可以恢复（阅读 "),_("a",{attrs:{href:"https://www.progit.cn/#_data_recovery",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据恢复"),_("OutboundLink")],1),t._v(" 了解数据恢复）。 然而，任何你未提交的东西丢失后很可能再也找不到了。")]),t._v(" "),_("blockquote",[_("p",[t._v("动手："),_("a",{attrs:{href:"https://blog.csdn.net/weixin_50240716/article/details/118447047",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 如何新建一个gitee仓库_小慈的博客-CSDN博客_gitee创建仓库"),_("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=v.exports}}]);